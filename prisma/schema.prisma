// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id String @id @default(uuid())

  name           String   @db.VarChar(256)
  description    String?
  link           String?
  cover          String?
  isbn           String
  published_date DateTime @default(now())
  inStock        Boolean

  Author           Author?  @relation(fields: [authorId], references: [id])
  authorId         String?
  reviews          Review[]
  Generes          Generes? @relation(fields: [generesGenere_id], references: [genere_id])
  generesGenere_id String?
  Cart             Cart[]
  Order            Order[]
}

model Customers {
  id       String  @id @default(uuid())
  role     String  @default("USER")
  username String  @unique
  email    String  @unique
  address  String  @db.VarChar(256)
  phone    String  @db.VarChar(10)
  avatar   String?
  password String

  reviews Review[]
  Cart    Cart[]
  Order   Order[]
}

model Review {
  review_id  String   @id @default(uuid())
  created_on DateTime @default(now())

  title      String
  body       String
  updated_on DateTime?

  Customers  Customers? @relation(fields: [customerId], references: [id])
  customerId String
  Book       Book?      @relation(fields: [bookId], references: [id])
  bookId     String

  @@unique([review_id, bookId])
  @@unique([review_id, customerId])
}

model Author {
  id String @id @default(uuid())

  name      String
  biography String?
  photo     String  @default("https://cdn-icons-png.flaticon.com/512/149/149071.png")

  books Book[]
}

model Generes {
  genere_id String @id @default(uuid())
  name      String

  books Book[]
}

model Cart {
  id String @id @default(uuid())

  quantity Int
  total    Int

  Customers  Customers? @relation(fields: [customerId], references: [id])
  customerId String
  Book       Book?      @relation(fields: [bookId], references: [id])
  bookId     String

  @@unique([customerId, bookId])
}

model Order {
  id String @id @default(uuid())

  quantity Int
  total    Int

  Customers  Customers? @relation(fields: [customerId], references: [id])
  customerId String
  Book       Book?      @relation(fields: [bookId], references: [id])
  bookId     String

  @@unique([customerId, bookId])
}

model Token {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  token  String @unique
}
